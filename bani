import json
import re
import sys

# Регулярные выражения для анализа синтаксиса
NAME_PATTERN = r"^[_A-Z][_a-zA-Z0-9]*$"  # Имена могут начинаться с _ или заглавной буквы
STRING_PATTERN = r'^"[^"]*"$'  # Строки, заключённые в двойные кавычки
NUMBER_PATTERN = r"^-?\d+$"  # Числа
SET_COMMAND = r"^set\s+([A-Z][_a-zA-Z0-9]*)\s*=\s*(.+)$"  # Команда set для констант
CONST_COMMAND = r"^\?\[([A-Z][_a-zA-Z0-9]*)\]$"  # Вычисление константы

def parse_config_file(file_path):
    constants = {}  # Хранение значений констант
    result = {}

    with open(file_path, 'r') as file:
        lines = file.readlines()

    current_dict = None
    dict_lines = []

    for line_no, line in enumerate(lines, start=1):
        line = line.strip()
        if not line or line.startswith("#"):  # Игнорируем пустые строки и комментарии
            continue

        # Обработка команды `set` для определения констант
        if match := re.match(SET_COMMAND, line):
            name, value = match.groups()
            if not re.match(NAME_PATTERN, name):
                raise SyntaxError(f"Invalid constant name on line {line_no}: {name}")
            constants[name] = parse_value(value, constants, line_no)
            continue

        # Начало блока словаря
        if line.startswith("{"):
            if current_dict is not None:
                raise SyntaxError(f"Unexpected '{{' on line {line_no}")
            current_dict = []
            dict_lines.append(line)
            continue

        # Конец блока словаря
        if line == "}":
            if current_dict is None:
                raise SyntaxError(f"Unexpected '}}' on line {line_no}")
            dict_lines.append(line)
            result.update(parse_dictionary_block(dict_lines, constants, line_no))
            dict_lines = []
            current_dict = None
            continue

        # Сбор строк словаря
        if current_dict is not None:
            dict_lines.append(line)
        else:
            raise SyntaxError(f"Invalid syntax on line {line_no}: {line}")

    if current_dict is not None:
        raise SyntaxError("Unclosed dictionary block")

    return result

def parse_value(value, constants, line_no):
    value = value.strip()

    # Числа
    if re.match(NUMBER_PATTERN, value):
        return int(value)
    
    # Строки
    if re.match(STRING_PATTERN, value):
        return value.strip('"')

    # Константы
    if re.match(CONST_COMMAND, value):
        const_name = re.match(CONST_COMMAND, value).group(1)
        if const_name not in constants:
            raise SyntaxError(f"Undefined constant on line {line_no}: {const_name}")
        return constants[const_name]

    # Вложенные словари
    if value.startswith("{") and value.endswith("}"):
        nested_lines = value.strip("{}").split(",")
        return parse_dictionary_block(nested_lines, constants, line_no)

    raise SyntaxError(f"Invalid value on line {line_no}: {value}")

def parse_dictionary_block(lines, constants, start_line_no):
    dictionary = {}
    for line_no, line in enumerate(lines, start=start_line_no):
        line = line.strip().rstrip(",")  # Убираем запятые и пробелы

        # Пропускаем открывающую и закрывающую скобки
        if line == "{" or line == "}":
            continue

        if ":" not in line:
            raise SyntaxError(f"Invalid dictionary entry on line {line_no}: {line}")
        
        key, value = map(str.strip, line.split(":", 1))
        
        if not re.match(NAME_PATTERN, key):
            raise SyntaxError(f"Invalid dictionary key on line {line_no}: {key}")

        dictionary[key] = parse_value(value, constants, line_no)

    return dictionary


def main():
    # Указываем путь к файлу напрямую в коде
    file_path = "/Users/banani/PycharmProjects/3konf/config.txt"
    
    try:
        result = parse_config_file(file_path)
        print(json.dumps(result, indent=4, ensure_ascii=False))
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()
